


不使用shader进行渲染的话，就是使用固定渲染管道进行渲染的了，把一堆数据交给device,device传给GPU，由GPU按照一定的算法进行计算，然后渲染出来。

shader就是将GPU所作的一部分工作截了下来，由着色器代码进行实现，然后将实现结果送还给硬件渲染。

shader里面最重要的是输入与输出，据我目前所看的资料来说，输入与输出所含有的变量往往要加语义表明这个变量是个什么东西，比如要接受位置时，所加的语义是POSITION,要接受uv时，要加语义TEXCOORD0。那么为什么要加这个东西呢？加这个东西是为了给谁看？很多讨论的文章都没有解释为什么要加语义。
据我目前的理解，shader开始接受的input数据，是来源于硬件，而最开始的input数据是我们在代码中通过device传给硬件的，我们代码传输的数据流有一定的格式，传输数据时要给device设置一个FVF，比如0到12个字节表示位置，而shader截下的过程需要处理的数据也源自这一段数据，如果我们在shader里面处理纹理的话，那么便需要数据流中的uv，硬件通过原始数据流按照FVF格式偏移一些字节之后找到uv，然后传给shader,这时shader拿到的uv值便是正确的uv值。而如果shader中input的uv不加语义的话，shader在请求数据时，不知道要查找数据流中位置还是uv还是color，那么这样就无法正确工作了，实际上也是这样，input中的变量如果不加语义的话，是无法正确编译的。
output的变量语义也是同样的道理。shader需要告诉硬件，它传回去的是个什么东西，这样硬件才能正确使用传回去的数据。

shade ps阶段输出一个Src颜色，然后显卡用这个Src颜色与Dest颜色按照shader指定的混合方法进行混合，也就是说，shader好像是无法直接干预Src与Dest的混合过程的，只能进行Src的处理。